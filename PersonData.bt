//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: Person.bin / 0000010ea800.bin
//   Authors: DeathChaos
//   Version: 1.08
//   Purpose: Three Houses character file mapping
//   History
//   1.00    2019-08-05  DeathChaos - started this
//   1.01    ----------  DeathChaos - Added AID
//   1.02    ----------  DeathChaos - Added Voice ID
//   1.03    ----------  DeathChaos - Added Facculty Related stuff
//   1.04    ----------  DeathChaos - Added Portrait IDs
//   1.05    ----------  DeathChaos - Added Character Goals
//   1.06    ----------  DeathChaos - Added Starting Weapon Ranks and Proficiencies
//   1.07    ----------  Moonling - Added Spell List and Skills
//   1.08    2019-09-04  DeathChaos - Added Enemy Personal Skills
//   1.09    2020-02-18  DeathCha0s - Fix AID blocks from 1.1.0, add base Battalion
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "3H_Enums.bt"
#include "3H_ArtsEnums.bt"

LittleEndian();
local int i<hidden=true>;

struct File{
	struct SectionPointers{
		uint32 NumberOfSectionPointers;
		uint32 PointerToCharBlocks<bgcolor=cRed>;
		uint32 CharBlockStructSize<bgcolor=cRed>;
		uint32 PointerToAssetID<bgcolor=cBlue>;
		uint32 AssetIDStructSize<bgcolor=cBlue>;
		uint32 PointerToVoiceID<bgcolor=cPurple>;
		uint32 VoiceIDStructSize<bgcolor=cPurple>;
		uint32 PointerToWpnRanks<bgcolor=cDkYellow>;
		uint32 WpnRanksStructSize<bgcolor=cDkYellow>;
		uint32 PointerToSpellLearnset<bgcolor=cYellow>;
		uint32 SpellLearnsetStructSize<bgcolor=cYellow>;
		uint32 PointerToSkillLearnset<bgcolor=cYellow>;
		uint32 SkillLearnsetStructSize<bgcolor=cYellow>;
		uint32 PointerToStartingWeapons<bgcolor=cDkBlue>;
		uint32 StartingWeaponsStructSize<bgcolor=cDkBlue>;
		uint32 PointerToArtLearnset<bgcolor=cYellow>;
		uint32 ArtLearnsetStructSize<bgcolor=cYellow>;
		uint32 UnkPointer01<bgcolor=cYellow>;
		uint32 UnkTotalSize01<bgcolor=cYellow>;
		uint32 UnkPointer02<bgcolor=cYellow>;
		uint32 UnkTotalSize02<bgcolor=cYellow>;
		uint32 SupportListPointer<bgcolor=cYellow>;
		uint32 SupportListSize<bgcolor=cYellow>;
		uint32 PointerToHiddenTalent<bgcolor=cYellow>;
		uint32 HiddenTalentStructSize<bgcolor=cYellow>;
		uint32 UnkPointer04<bgcolor=cYellow>;
		uint32 UnkTotalSize04<bgcolor=cYellow>;
		uint32 PointerToFacultyTraining<bgcolor=cBlack>;
		uint32 FacultyTrainingStructSize<bgcolor=cBlack>;
		uint32 PointerToSeminar<bgcolor=cGreen>;
		uint32 SeminarTotalSize<bgcolor=cGreen>;
		uint32 Size3Pointer<bgcolor=cDkRed>;
		uint32 Size3TotalSize<bgcolor=cDkRed>;
		uint32 PortraitsPointer<bgcolor=cDkPurple>;
		uint32 PortraitsTotalSize<bgcolor=cDkPurple>;
		uint32 SizeFourPointer<bgcolor=cDkGreen>;
		uint32 SizeFourTotalSize<bgcolor=cDkGreen>;
		
	}sectionpointers<name="Section Pointers">;
	
	FSeek(sectionpointers.PointerToCharBlocks);
	struct PersonStructure{
		uint32 Person_Magic;
		uint32 numPerson;
		uint32 SizeOfPersonBlock;
		struct PersonHeaderPadding{
			byte Padding[0x34];
		}personheaderpadding<name="Padding">;
		struct Person{
			struct ModelScale{
				float Scale04<name="Chest Band/Width modifier">;
				float Scale02<name="Female Chest Size modifier (pre time skip)">;
				float Scale01<name="Model Size Scale">;
				float Scale03<name="Female Chest Size modifier (post time skip)">;
			}modelscale<name="Model Scale Values">;
			int16 unk_0x10;
			Names NameID<name="Name ID">;
			int16 unk_0x14;
			uint16 CharacterID<name="Voice ID">;
			uint16 AssetsID<name="Asset ID">;
			ClassName Class<name="Class">;
			byte Age<name="Age">;
			byte BirthMonth<name="Birth Month">;
			byte BirthdayFlag;
			byte Birthday<name="Birth Day">;
			byte unk_0x1F;
			byte saveDataID<name="Save Data ID">;
			byte unk_0x21;
			byte HPCap<name="Max HP">;
			byte unk_0x23;
			AllegianceID Allegiance<name="Allegiance">;
			byte unk_0x25;
			GenderFlag Gender<name="Gender">;
			byte BodyType<name="Body Type">;
			Battalion BaseBattalion<name="Base Battalion">;
			byte HPGrowth<name="HP Growth">;
			byte AnimSet<name="Non Combat Animation Set">;
			byte BaseHP<name="Base HP">;
			Crests Crest<name="Primary Crest">;
			Crests Crest<name="Secondary Crest">;
			byte unk_0x2E;
			ubyte PreTimeSkipHeight<name="Pre-Time Skip Height (cm)">;
			ubyte PostTimeSkipHeight<name="Post-Time Skip Height (cm)">;
			uint16 unknown<name="Unknown Value">;
			struct CharacterStats{
				struct BaseStats{
					byte BaseStr<name="Base Str">;
					byte BaseMag<name="Base Mag">;
					byte BaseDex<name="Base Dex">;
					byte BaseSpd<name="Base Spd">;
					byte BaseLck<name="Base Lck">;
					byte BaseDef<name="Base Def">;
					byte BaseRes<name="Base Res">;
					byte BaseMov<name="Base Mov">;
					byte BaseCharm<name="Base Cha">;
				}basestats<bgcolor=cBlue,name="Base Stats">;
				struct BaseGrowths{
					byte StrGrowth<name="Str Growth">;
					byte MagGrowth<name="Mag Growth">;
					byte DexGrowth<name="Dex  Growth">;
					byte SpdGrowth<name="Spd Growth">;
					byte LckGrowth<name="Lck Growth">;
					byte DefGrowth<name="Def Growth">;
					byte ResGrowth<name="Res Growth">;
					byte MovGrowth<name="Mov Growth">;
					byte CharmGrowth<name="Cha Growth">;
				}basegrowths<bgcolor=cGreen,name="Growths">;
				struct MaxStats{
					byte MaxStr<name="Max Str">;
					byte MaxMag<name="Max Mag">;
					byte MaxDex<name="Max Dex">;
					byte MaxSpd<name="Max Spd">;
					byte MaxLck<name="Max Lck">;
					byte MaxDef<name="Max Def">;
					byte MaxRes<name="Max Res">;
					byte MaxMov<name="Max Mov">;
					byte MaxCharm<name="Max Cha">;
				}maxstats<bgcolor=cYellow,name="Stat Caps">;
				byte padding[2]<name="Padding">;
			}characterstats<name="Stats and Growths">;
		}person[numPerson]<read=ReadNameID, name="Character Block">;
	}personstructure<bgcolor=cRed, name="Character Blocks">;
	
	FSeek(sectionpointers.PointerToAssetID);
	struct AssetIDStructure{
		uint32 AID_Magic;
		uint32 numAID;
		uint32 SizeOfAIDBlock;
		struct AIDHeaderPadding{
			byte Padding[0x34];
		}aidheaderpadding<name="Padding">;
		struct AssetID{
			int16 NGPlusHair<name="NG+ Hair?">;
			int16 TimeSkipHeadModel<name="Part 2 Head Model">;
			int16 TimeSkipPortrait<name="Part 2 Portraits">;
			int16 PreTimeSkipHead<name="Part 1 Head Model">;
			int16 PreTimeSkipPortrait<name="Part 1 Portrait">;
			int16 BodyModelTimeSkip<name="Part 2 Model">;
			int16 DLCOutfit<name="Post Sothis Fusion Asset ID (Flag Set)">;
			int16 BodyModelPreTimeSkip<name="Part 1 Model">;
			int16 AlternateStatePortrait<name="Alternate State Portrait (Constance)">;
		}assetid[numAID]<bgcolor=cGreen>;
	}assetidstructure<bgcolor=cBlue, name="Asset IDs">;
	
	FSeek(sectionpointers.PointerToVoiceID);
	struct VoiceIDStructure{
		uint32 Voice_Magic;
		uint32 numVoice;
		uint32 SizeOfVoiceBlock;
		struct VoiceHeaderPadding{
			byte Padding[0x34];
		}voiceheaderpadding<name="Padding">;
		struct VoiceID{
			uint16 voice;
			uint16 voice;
			uint16 voice;
			uint16 voice;
		}voiceid[numVoice];
	}voicestructure<bgcolor=cPurple, name="Voice IDs">;
	
	FSeek(sectionpointers.PointerToWpnRanks);
	struct WpnRankStructure{
		uint32 WpnRank_Magic<bgcolor=cRed>;
		uint32 numWpnRank<bgcolor=cRed>;
		uint32 SizeOfWpnRankBlock<bgcolor=cRed>;
	    byte Padding[0x34]<bgcolor=cBlue>;
		struct WpnRank{
            for( i = 0; i < numWpnRank; i++ )
            {
                struct WpnRankData {
                    local CharID NameOfChar<hidden=true>;
                    NameOfChar = i; 
			        uint16 unk;
			        PaletteID CharColor<name="Character Color">;
			        ClassName uniqueclass1<name="PreTimeSkip Class">;
			        ClassName certclass<name="Certified Class">;
			        ClassName certclass<name="Certified Class">;
			        ClassName certclass<name="Certified Class">;
			        ClassName certclass<name="Certified Class">;
			        ubyte unk;
			        struct StartingRanks{
				        MinRanks rank0<name="Starting Sword Rank">;
				        MinRanks rank1<name="Starting Lances Rank">;
				        MinRanks rank2<name="Starting Axes Rank">;
				        MinRanks rank3<name="Starting Bows Rank">;
				        MinRanks rank4<name="Starting Brawling Rank">;
				        MinRanks rank5<name="Starting Reason Rank">;
				        MinRanks rank6<name="Starting Faith Rank">;
				        MinRanks rank7<name="Starting Authority Rank">;
				        MinRanks rank8<name="Starting Armor Rank">;
				        MinRanks rank9<name="Starting Riding Rank">;
				        MinRanks rank10<name="Starting Flying Rank">;
			        }startingranks<name="Starting Weapon Ranks">;
			        struct WpnProficiency{
				        ubyte rank0<name="Sword Proficiency">;
				        ubyte rank1<name="Lances Proficiency">;
				        ubyte rank2<name="Axes Proficiency">;
				        ubyte rank3<name="Bows Proficiency">;
				        ubyte rank4<name="Brawling Proficiency">;
				        ubyte rank5<name="Reason Proficiency">;
				        ubyte rank6<name="Faith Proficiency">;
				        ubyte rank7<name="Authority Proficiency">;
				        ubyte rank8<name="Armor Proficiency">;
				        ubyte rank9<name="Riding Proficiency">;
				        ubyte rank10<name="Flying Proficiency">;
			        }wpnproficiency<name="Proficiencies">;
			        ClassName class<name="Post TimeSkip Class">;
			        ClassName class<name="Post TimeSkip Class">;
			        ClassName class<name="Post TimeSkip Class">;
                }wpnrankdata<name="Wpn Ranks/Assets Data", read=GetCharNames4>;
            }
		}wpnrank<name="Starting Weapon Ranks/Combat Assets">;
	}wpnrankstructure<bgcolor=cDkYellow, name="Starting Weapon Ranks/Combat Assets">;
	
	FSeek(sectionpointers.PointerToStartingWeapons);
	struct StartingWeaponsStructure{
		uint32 Weapons_Magic;
		uint32 numStartWep;
		uint32 SizeOfStartWep;
		struct StartWeaponHeaderPadding{
			byte Padding[0x34];
		}startweaponheaderpadding<name="Padding">;
		struct StartWepID{
			uint16 CharacterID<name="Character ID">;
			uint16 Weapon<name="Weapon">;
			uint16 Weapon<name="Weapon">;
			uint16 Weapon<name="Weapon">;
			uint16 Weapon<name="Weapon">;
			uint16 Weapon<name="Weapon">;
			uint16 Weapon<name="Weapon">;
		}startwepid[numStartWep];
	}startingweaponsstructure<bgcolor=cDkBlue, name="Starting Weapons">;
	
	FSeek(sectionpointers.PointerToFacultyTraining);
	struct FacultyTraining{
		uint32 FacultyMagic;
		uint32 numFaculty;
		uint32 SizeOfFaculty;
		struct FacultyHeaderPadding{
			byte Padding[0x34];
		}facultyheaderpadding<name="Padding">;
		struct FacultyID{
			struct StatBits{
				ubyte bit0 : 1<name="Sword">;
				ubyte bit1 : 1<name="Lances">;
				ubyte bit2 : 1<name="Axes">;
				ubyte bit3 : 1<name="Bows">;
				ubyte bit4 : 1<name="Brawling">;
				ubyte bit5 : 1<name="Reason">;
				ubyte bit6 : 1<name="Faith">;
				ubyte bit7 : 1<name="Authority">;
				ubyte bit8 : 1<name="Armor">;
				ubyte bit9 : 1<name="Riding">;
				ubyte bit10 : 1<name="Flying">;
				ubyte bit11 : 1<name="Reserve">;
				ubyte bit12 : 1<name="Reserve">;
				ubyte bit13 : 1<name="Reserve">;
				ubyte bit14 : 1<name="Reserve">;
				ubyte bit15 : 1<name="Reserve">;
			}statbits<name="Teachable Stats">;
			ushort CharacterID<name="Character ID">;
			TrueFalse IsTeacher<name="IsTeacher">;
			byte padding;
		}facultyid[numFaculty]<name="Faculty Training Stuff">;
	}facultytraining<bgcolor=cBlack,name="Faculty ID">;
	
	FSeek(sectionpointers.PointerToSeminar);
	struct SeminarTraining{
		uint32 SeminarMagic;
		uint32 numSeminar;
		uint32 SizeOfSeminar;
		struct SeminarHeaderPadding{
			byte Padding[0x34];
		}seminarheaderpadding<name="Padding">;
		struct SeminarID{
			struct StatBitsSeminar{
				ubyte bit0 : 1<name="Sword">;
				ubyte bit1 : 1<name="Lances">;
				ubyte bit2 : 1<name="Axes">;
				ubyte bit3 : 1<name="Bows">;
				ubyte bit4 : 1<name="Brawling">;
				ubyte bit5 : 1<name="Reason">;
				ubyte bit6 : 1<name="Faith">;
				ubyte bit7 : 1<name="Authority">;
				ubyte bit8 : 1<name="Armor">;
				ubyte bit9 : 1<name="Riding">;
				ubyte bit10 : 1<name="Flying">;
				ubyte bit11 : 1<name="Reserve">;
				ubyte bit12 : 1<name="Reserve">;
				ubyte bit13 : 1<name="Reserve">;
				ubyte bit14 : 1<name="Reserve">;
				ubyte bit15 : 1<name="Reserve">;
			}statbitsseminar<name="Stats Interested">;
			ushort CharacterID<name="Character ID">;
			TrueFalse IsTeacher<name="IsTeacher">;
			byte padding;
		}seminarid[numSeminar]<name="Seminar Stuff">;
	}seminartraining<bgcolor=cGreen,name="Seminar ID">;
	
	FSeek(sectionpointers.Size3Pointer);
	struct CharacterGoals{
		uint32 CharacterGoalsMagic;
		uint32 numCharacterGoals;
		uint32 SizeOfCharacterGoals;
		struct CharacterGoalsHeaderPadding{
			byte Padding[0x34];
		}charactergoalspadding<name="Padding">;
		struct CharacterGoalsID{
			ubyte Goal<name="Goal ID">;
			ubyte unk2;
			ubyte unk3;
		}charactergoalsid[numCharacterGoals];
	}charactergoals<bgcolor=cDkRed,name="Character Goals">;
	
	FSeek(sectionpointers.PortraitsPointer);
	struct Portraits{
		uint32 PortraitsMagic;
		uint32 numPortraits;
		uint32 SizeOfPortraits;
		struct PortraitsHeaderPadding{
			byte Padding[0x34];
		}portraitsheaderpadding<name="Padding">;
		struct PortraitsID{
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 unk<name="Expression ">;
			uint16 TimeSkip<name="Unknown Flag">;
		}portraitsid[numPortraits]<name="Face ID">;
	}portraits<bgcolor=cDkPurple,name="Portrait IDs">;

    FSeek(sectionpointers.PointerToSpellLearnset);
    struct SpellListStructure {
        uint SpellListMagic<bgcolor=cRed>;
        uint numSpellList<bgcolor=cRed>;
        uint SizeOfSpellList<bgcolor=cRed>;
        struct SpellListHeaderPadding {
            byte Padding[0x34];
        }spelllistheaderpadding<name="Padding", bgcolor=cBlue>;
        struct SPELLLIST{
            for( i = 0; i < numSpellList; i++ )
            {
                struct SpellListData {
                    local CharID NameOfChar<hidden=true>;
                    NameOfChar = i; 
                    MinRanks FaithLearnLevel[5]<name="Faith Learnt Level", comment="0 = null">;
                    SpellID ReasonList[5]<name="Reason Spells">;
                    SpellID FaithList[5]<name="Faith Spells">;
                    MinRanks ReasonLearnLevel[5]<name="Reason Learnt Level", comment="0 = null">;
                }spelllistdata<name="Spell List Data", read=GetCharNames3>;
            }
        }SpellList<name="Spell List">;
    }spellliststructure<name="Spell List Table", bgcolor=cYellow>;

    FSeek(sectionpointers.PointerToSkillLearnset);
    struct SkillListStructure {
        uint SkillListMagic<bgcolor=cRed>;
        uint numSkillList<bgcolor=cRed>;
        uint SizeOfSpellList<bgcolor=cRed>;
        byte Padding[0x34];
        struct SKILLLIST {
            for( i = 0; i < numSkillList; i++)
            {
                struct SkillListData {
                    local CharID NameOfChar<hidden=true>;
                    NameOfChar = i;
                    RankStats SkillLearn[20]<name="Special Skill Learn List">;
                    AbilityID PreTSPersonalSkill<name="Pre Time Skip Personal Skill">;
                    AbilityID PostTSPersonalSkill<name="Post Time Skip Personal Skill">;
                    AbilityID AbilitiesLearnt[20]<name="Abilities Learnt">;
                    MinRanks RankLearnt[20]<name="Rank Learnt at">;
                }skilllistdata<name="Skill List Data", read=GetCharNames2>;
            }
        }SkillList<name="Skill List">;
    }skillliststructure<name="Skill List Table", bgcolor=cLtYellow>;
	
	FSeek(sectionpointers.SizeFourPointer);
	struct SizeFour{
		uint32 SizeFourMagic;
		uint32 numSizeFour;
		uint32 SizeOfSizeFour;
		struct SizeFourHeaderPadding{
			byte Padding[0x34];
		}sizefourheaderpadding<name="Padding">;
		struct SizeFourID{
			uint16 charID<name="Character">;
			AbilityID skillid<name="Skill ID">;
			byte pad<hidden=true>;
		}sizefourid[numSizeFour]<name="Enemy Personal Skills",read=GetName>;
	}sizefour<name="Enemy Personal Skills", bgcolor=cDkGreen>;

    FSeek(sectionpointers.PointerToArtLearnset);
    struct ArtLearnsetStruct{
        uint Magic<bgcolor=cRed>;
        uint numArtLearnset<bgcolor=cRed>;
        uint SizeOfArtLearnset<bgcolor=cRed>;
        ubyte Padding[0x34]<bgcolor=cBlue>;
        struct ArtLearnset {
            for( i = 0; i < numArtLearnset; i++)
            {
                struct ArtLearnsetData {
                    local CharID NameOfChar<hidden=true>;
                    NameOfChar = i;
                    ArtID ArtLearned[10]<name="Combat Art Learned">;
                    RankStats RequiredStat[10]<name="Required Stat">;
                    MinRanks RequiredRank[10]<name="Required Rank">;
                }artlearnsetdata<name="Combat Art Learnset Data", read=GetCharNames>;
            }
        }artlearnset<name="Combat Art Learnset", bgcolor=cYellow>;
    }artlearnsetstruct<name="Combat Art Learnset Table">;

    FSeek(sectionpointers.PointerToHiddenTalent);
    struct HiddenTalentStruct {
        uint Magic<bgcolor=cRed>;
        uint numHdnTal<bgcolor=cRed>;
        uint SizeOfHndTal<bgcolor=cRed>;
        ubyte Padding[0x34]<bgcolor=cBlue>;
            struct HiddenTalentData {
                CharID character<name="Character ID">;
                ubyte Unk;
                ubyte level<name="Required Exp">;
                RankStats Stat<name="Required Stat">;
                ArtID Art<name="Combat Art Learnt">;
                AbilityID Skill<name="Skill Learnt">;
            }hiddentalentdata[numHdnTal]<name="Hidden Talent Data", read=GetTalentNames>;
    }hiddentalentstruct<name="Hidden Talent Table", bgcolor=cYellow>;
	
	FSeek(sectionpointers.UnkPointer01);
	struct UnkSect1{
		uint32 UnkSect1Magic;
		uint32 numUnkSect1;
		uint32 SizeOfUnkSect1;
		struct UnkSect1HeaderPadding{
			byte Padding[0x34];
		}UnkSect1headerpadding<name="Padding">;
		struct UnkSect1ID{
			byte unk1;
			byte unk2;
			byte unk3;
			byte unk4;
			byte unk5;
			byte unk6;
			byte unk7;
			byte unk8;
			byte unk9;
			byte unk10;
			byte hitn<name="No Support Hit">;
			byte hitc<name="C Support Hit">;
			byte hitb<name="B Support Hit">;
			byte hita<name="A Support Hit">;
			byte hits<name="S Support Hit">;
			byte avon<name="No Support Avo">;
			byte avoc<name="C Support Avo">;
			byte avob<name="B Support Avo">;
			byte avoa<name="A Support Avo">;
			byte avos<name="S Support Avo">;
			byte mtn<name="No Support Mt">;
			byte mtc<name="C Support Mt">;
			byte mtb<name="B Support Mt">;
			byte mta<name="A Support Mt">;
			byte mts<name="S Support Mt">;
		}unksect1id[numUnkSect1]<name="Linked Attack Data",optimize=false>;
	}unksect1<name="Linked Attacks (Generic)", bgcolor=cDkGreen>;
	
	FSeek(sectionpointers.UnkPointer02);
	struct UnkSect2{
		uint32 UnkSect2Magic;
		uint32 numUnkSect2;
		uint32 SizeOfUnkSect2;
		struct UnkSect2HeaderPadding{
			byte Padding[0x34];
		}UnkSect2headerpadding<name="Padding">;
		struct UnkSect2ID{
			Names NameID1<name="Name ID 1">;
			Names NameID2<name="Name ID 2">;
			byte unk5;
			byte unk6;
			byte unk7;
			byte unk8;
			byte unk9;
			byte unk10;
			byte unk11;
			byte unk12;
			byte unk13;
			byte unk14;
			byte hitn<name="No Support Hit">;
			byte hitc<name="C Support Hit">;
			byte hitb<name="B Support Hit">;
			byte hita<name="A Support Hit">;
			byte hits<name="S Support Hit">;
			byte avon<name="No Support Avo">;
			byte avoc<name="C Support Avo">;
			byte avob<name="B Support Avo">;
			byte avoa<name="A Support Avo">;
			byte avos<name="S Support Avo">;
			byte mtn<name="No Support Mt">;
			byte mtc<name="C Support Mt">;
			byte mtb<name="B Support Mt">;
			byte mta<name="A Support Mt">;
			byte mts<name="S Support Mt">;
            byte unk30;
		}unksect2id[numUnkSect2]<name="Special Linked Attack Data",optimize=false>;
	}unksect2<name="Linked Attacks (Special)", bgcolor=cDkGreen>;
	
	FSeek(sectionpointers.SupportListPointer);
    struct SupportListTableStruct{
        uint Magic<bgcolor=cRed>;
        uint numSupportPairs<bgcolor=cRed>;
        uint SizeOfSupportPairs<bgcolor=cRed>;
        ubyte Padding[0x34]<bgcolor=cBlue>;
                struct SupportPairs{
                    byte Padding[0x2]<hidden=true>;
                    Names NameOfChar<name="Character">;
                    Names NameOfChar<name="Character">;
                    ushort Unk;
                    ushort Unk;
                }supportpairs[numSupportPairs]<name="Support Pair", read=GetSupportPairs>;
    }supportlisttablestruct<bgcolor=0x70c009, name="Support Pair Table">;
	
	FSeek(sectionpointers.UnkPointer04);
	struct SharedAbilitiesTableStruct{
		uint32 SharedAbilitiesMagic<bgcolor=cRed>;
		uint32 numSharedAbilities<bgcolor=cRed>;
		uint32 SizeOfSharedAbilities<bgcolor=cRed>;
		struct SharedAbilitiesHeaderPadding{
			byte Padding[0x34];
		}SharedAbilitiesheaderpadding<name="Padding">;
        for( i = 0; i < numSharedAbilities; i++ )
		{
		    struct SharedAbilitiesStruct{
                local MinRanks NameOfRank<hidden=true>;
			    NameOfRank = i;
			    ArtID NameOfArt<name="Sword Combat Art">;
			    ArtID NameOfArt<name="Lance Combat Art">;
			    ArtID NameOfArt<name="Axe Combat Art">;
			    ArtID NameOfArt<name="Bow Combat Art">;
			    ArtID NameOfArt<name="Gauntlet Combat Art">;
			    ArtID NameOfArt<name="Reason Combat Art">;
			    ArtID NameOfArt<name="Faith Combat Art">;
			    ArtID NameOfArt<name="Authority Combat Art">;
			    ArtID NameOfArt<name="Armor Combat Art">;
			    ArtID NameOfArt<name="Riding Combat Art">;
			    ArtID NameOfArt<name="Flying Combat Art">;
			    AbilityID NameOfAbility<name="Sword Ability">;
			    AbilityID NameOfAbility<name="Lance Ability">;
			    AbilityID NameOfAbility<name="Axe Ability">;
			    AbilityID NameOfAbility<name="Bow Ability">;
			    AbilityID NameOfAbility<name="Gauntlet Ability">;
			    AbilityID NameOfAbility<name="Reason Ability">;
			    AbilityID NameOfAbility<name="Faith Ability">;
			    AbilityID NameOfAbility<name="Authority Ability">;
			    AbilityID NameOfAbility<name="Armor Ability">;
			    AbilityID NameOfAbility<name="Riding Ability">;
			    AbilityID NameOfAbility<name="Flying Ability">;
		    }sharedabilitiesstruct<name="Shared Learnset Data", read=GetRankName, optimize=false>;
        }
	}unksect4<name="Shared Learnset Table", bgcolor=cDkGreen>;
	

}file;

string ReadNameID(Person &p)
{
return EnumToString(p.NameID);
}

string GetName(SizeFourID& value)
{
    return EnumToString(value.charID);
}
string GetCharNames(ArtLearnsetData &i)
{
    return EnumToString(i.NameOfChar);
}
string GetCharNames2(SkillListData &i)
{
    return EnumToString(i.NameOfChar);
}
string GetCharNames3(SpellListData &i)
{
    return EnumToString(i.NameOfChar);
}
string GetTalentNames(HiddenTalentData &i)
{
    return EnumToString(i.character);
}
string GetCharNames4(WpnRankData &i)
{
    return EnumToString(i.NameOfChar);
}
string GetRankName(SharedAbilitiesStruct &i)
{
    return EnumToString(i.NameOfRank);
}

string GetSupportPairs(SupportPairs &i)
{
    string supportPairs = EnumToString(i.NameOfChar[0]) + EnumToString(i.NameOfChar[1]);
    if (supportPairs == "")
        return "";
    return EnumToString(i.NameOfChar[0]) + " + " + EnumToString(i.NameOfChar[1]);
} 